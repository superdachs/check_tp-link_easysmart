#     2019 Stefan Kauerauf <mail@stefankauerauf.de>
#     last modified: 2/5/2019
#
#     easysmart.py is part of check_tp-link_easysmart
#     check_tp-link_easysmart is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     check_tp-link_easysmart is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with check_tp-link_easysmart.  If not, see <http://www.gnu.org/licenses/>.
import os


def inventory_easysmart_ports(info):
    for line in info:
        if int(line[1]) == 1:
            yield line[0], None


def convert_info(info):
    info_dict = {}
    for line in info:
        info_dict.update({
            line[0]: {
                'state': int(line[1]),
                'state_name': line[2].replace('_', ' '),
                'link': int(line[3]),
                'link_name': line[4].replace('_', ' '),
                'tx_ok': int(line[5]),
                'tx_err': int(line[6]),
                'rx_ok': int(line[7]),
                'rx_err': int(line[8]),
            }
        })
    return info_dict


def check_easysmart_ports(item, params, info):
    oldlines = []
    hostaddress = info[0][9]
    tmpfilename = '/tmp/easysmart_%s' % hostaddress
    try:
        with open(tmpfilename, 'r') as f:
            for line in f.readlines():
                oldlines.append(line.split())
    except IOError:
        ret = 3, 'no temp file found, check must run twice for calculation'
        try:
            with open(tmpfilename, 'w') as f:
                for line in info:
                    f.write(' '.join(line) + "\n")
        except IOError:
            ret = 3, "can't write temp file, check permissions"
        return ret

    info_dict = convert_info(info)
    if info_dict[item]['link'] < 2:
        return 2, "Port is %s but link is %s" % (info_dict[item]['state_name'], info_dict[item]['link_name'])

    try:
        old_info_dict = convert_info(oldlines)
    except IndexError:
        os.remove(tmpfilename)
        return 2, "tempfile was corrupt, deleted"

    tx_ok = info_dict[item]['tx_ok'] - old_info_dict[item]['tx_ok']
    if tx_ok < 0:
        tx_ok = info_dict[item]['tx_ok']
    tx_err = info_dict[item]['tx_err'] - old_info_dict[item]['tx_err']
    if tx_err < 0:
        tx_err = info_dict[item]['tx_err']
    rx_ok = info_dict[item]['rx_ok'] - old_info_dict[item]['rx_ok']
    if rx_ok < 0:
        rx_ok = info_dict[item]['rx_ok']
    rx_err = info_dict[item]['rx_err'] - old_info_dict[item]['rx_err']
    if rx_err < 0:
        rx_err = info_dict[item]['rx_err']

    # write only data of this item to temp file
    old_info_dict[item] = info_dict[item]
    with open(tmpfilename, 'w') as f:
        for k, v in old_info_dict.items():
            line = "%s %s %s %s %s %s %s %s %s %s\n" % (
            str(k), str(v['state']), v['state_name'].replace(' ', '_'), str(v['link']), v['link_name'].replace(' ', '_'), v['tx_ok'], v['tx_err'],
            v['rx_ok'], v['rx_err'], info[0][9])
            f.write(line)

    statistics = " - %s - TX_OK: %s TX_ERR: %s RX_OK: %s RX_ERR %s" % (
        info_dict[item]['link_name'], tx_ok, tx_err, rx_ok, rx_err)
    if tx_err > tx_ok:
        return 2, "CRITICAL TX ERROR > TX OK" + statistics
    if rx_err > rx_ok:
        return 2, "CRITICAL RX ERROR > RX OK" + statistics
    if tx_err > 0:
        return 1, "WARNING TX ERROR > 0" + statistics
    if rx_err > 0:
        return 1, "WARNING RX ERROR > 0" + statistics
    return 0, "OK" + statistics


check_info["easysmart.ports"] = {
    'check_function': check_easysmart_ports,
    'inventory_function': inventory_easysmart_ports,
    'service_description': 'status and statistics of port %s',
    'has_perfdata': False,
}
